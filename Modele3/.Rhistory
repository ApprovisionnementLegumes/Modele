production)
{
# TEST
#input_product_id = 15
#production = 200
id_surface = (impacts %>% filter(name == "Surface de terre"))$id_impact
# calculate the surface
specific_surface <-
production * ((
production_impacts %>% filter(id_product == input_product_id,
id_impact == id_surface)
)$value)
# dans la DB, la surface par qtt est en ha*10-3 par kilo.
# En multipliant par la demande en tonnes,
# on obtient directement la surface spécifique en ha
print(paste0("Specific surface : ",specific_surface," ha"))
list_impact = data.frame(name = c(),
value = c(),
units = c(),
incertitude = c()
)
for (impact_id in c(1:length(impacts$id_impact))) {                              # !!!! si les id changent (pas très optimal mais j'ai pas réussi à transformer une colonne de df en liste)
#===========================================
# EXCEPTION SI IMPACT + RENDEMENT OU SURFACE
#===========================================
#if(impact_id == (impacts %>% filter(name == "Surface de terre"))$id_impact){
# do nothing
#}
else if(impact_id == (impacts %>% filter(name == "Rendements"))$id_impact){
# do nothing
}
#===========================================
# CALCUL DES IMPACTS
#===========================================
else{
#print(impact_id)
impact_value_final <- 0
# NAME
impact_name <- (impacts %>% filter(id_impact == impact_id))$name
# UNITS
impact_units1 <-
(impacts %>% filter(id_impact == impact_id))$units1
impact_units2 <-
(impacts %>% filter(id_impact == impact_id))$units2
# VALUE
impact_value <-
(
production_impacts %>% filter(id_impact == impact_id,
id_product == input_product_id)
)$value
#=============================================
# 1. Cas ou l'impact est en unité par kilo
if (impact_units2 == "kg")
{
impact_value_final <- impact_value * production * 1000 #multiply by 1000 because production is in t
}
#=============================================
# 2. Cas ou l'impact est en unité par hectare
else if (impact_units2 == "ha")
{
impact_value_final <- impact_value * specific_surface
}
#=============================================
# 3. Cas ou l'impact est en unité par kilo par jour
else if (impact_units2 == "kg.jour")  # cas du stockage
{
impact_value_final <- 0.00122 * production * 1000                       # Valeur rentrée mannuellement. Automatiser?
}
#=============================================
# EXCEPTIONS
#=============================================
else{
if (impact_name == "DQR"){
DQR_id <- (impacts %>% filter(name == "DQR"))$id_impact
impact_value_final = (production_impacts %>% filter(id_product == input_product_id,
id_impact == DQR_id))$value
}
else{print(paste0("Error : impact not found. Impact ID is : ",impact_id))}
}
#=============================================
# Encodage et sauvegarde
#=============================================
temp <- data.frame(name = impact_name,
value = impact_value_final,
units = impact_units1,
incertitude = (impacts %>% filter(name == impact_name))$incertitude)
list_impact <- rbind(list_impact, temp)
#print(paste0("The impact on ",impact_name," is ",impact_value_final," ",impact_units1))
}
}
return(list_impact)
}
# TEST
get_impacts(17,200)
get_impacts <-
function(input_product_id,
production)
{
# TEST
#input_product_id = 15
#production = 200
id_surface = (impacts %>% filter(name == "Surface de terre"))$id_impact
# calculate the surface
specific_surface <-
production * ((
production_impacts %>% filter(id_product == input_product_id,
id_impact == id_surface)
)$value)
# dans la DB, la surface par qtt est en ha*10-3 par kilo.
# En multipliant par la demande en tonnes,
# on obtient directement la surface spécifique en ha
print(paste0("Specific surface : ",specific_surface," ha"))
list_impact = data.frame(name = c(),
value = c(),
units = c(),
incertitude = c()
)
for (impact_id in c(1:length(impacts$id_impact))) {                              # !!!! si les id changent (pas très optimal mais j'ai pas réussi à transformer une colonne de df en liste)
#===========================================
# EXCEPTION SI IMPACT + RENDEMENT OU SURFACE
#===========================================
#if(impact_id == (impacts %>% filter(name == "Surface de terre"))$id_impact){
# do nothing
#}
else if(impact_id == (impacts %>% filter(name == "Rendements"))$id_impact){
# do nothing
}
#===========================================
# CALCUL DES IMPACTS
#===========================================
else{
#print(impact_id)
impact_value_final <- 0
# NAME
impact_name <- (impacts %>% filter(id_impact == impact_id))$name
# UNITS
impact_units1 <-
(impacts %>% filter(id_impact == impact_id))$units1
impact_units2 <-
(impacts %>% filter(id_impact == impact_id))$units2
# VALUE
impact_value <-
(
production_impacts %>% filter(id_impact == impact_id,
id_product == input_product_id)
)$value
#=============================================
# 1. Cas ou l'impact est en unité par kilo
if (impact_units2 == "kg")
{
impact_value_final <- impact_value * production * 1000 #multiply by 1000 because production is in t
}
#=============================================
# 2. Cas ou l'impact est en unité par hectare
else if (impact_units2 == "ha")
{
impact_value_final <- impact_value * specific_surface
}
#=============================================
# 3. Cas ou l'impact est en unité par kilo par jour
else if (impact_units2 == "kg.jour")  # cas du stockage
{
impact_value_final <- 0.00122 * production * 1000                       # Valeur rentrée mannuellement. Automatiser?
}
#=============================================
# EXCEPTIONS
#=============================================
else{
if (impact_name == "DQR"){
DQR_id <- (impacts %>% filter(name == "DQR"))$id_impact
impact_value_final = (production_impacts %>% filter(id_product == input_product_id,
id_impact == DQR_id))$value
}
else{print(paste0("Error : impact not found. Impact ID is : ",impact_id))}
}
#=============================================
# Encodage et sauvegarde
#=============================================
temp <- data.frame(name = impact_name,
value = impact_value_final,
units = impact_units1,
incertitude = (impacts %>% filter(name == impact_name))$incertitude)
list_impact <- rbind(list_impact, temp)
#print(paste0("The impact on ",impact_name," is ",impact_value_final," ",impact_units1))
}
}
return(list_impact)
}
# TEST
get_impacts(17,200)
get_impacts <-
function(input_product_id,
production)
{
# TEST
#input_product_id = 15
#production = 200
id_surface = (impacts %>% filter(name == "Surface de terre"))$id_impact
# calculate the surface
specific_surface <-
production * ((
production_impacts %>% filter(id_product == input_product_id,
id_impact == id_surface)
)$value)
# dans la DB, la surface par qtt est en ha*10-3 par kilo.
# En multipliant par la demande en tonnes,
# on obtient directement la surface spécifique en ha
print(paste0("Specific surface : ",specific_surface," ha"))
list_impact = data.frame(name = c(),
value = c(),
units = c(),
incertitude = c()
)
for (impact_id in c(1:length(impacts$id_impact))) {                              # !!!! si les id changent (pas très optimal mais j'ai pas réussi à transformer une colonne de df en liste)
#===========================================
# EXCEPTION SI IMPACT + RENDEMENT OU SURFACE
#===========================================
#if(impact_id == (impacts %>% filter(name == "Surface de terre"))$id_impact){
# do nothing
#}
else if(impact_id == (impacts %>% filter(name == "Rendements"))$id_impact){
# do nothing
}
#===========================================
# CALCUL DES IMPACTS
#===========================================
else{
#print(impact_id)
impact_value_final <- 0
# NAME
impact_name <- (impacts %>% filter(id_impact == impact_id))$name
# UNITS
impact_units1 <-
(impacts %>% filter(id_impact == impact_id))$units1
impact_units2 <-
(impacts %>% filter(id_impact == impact_id))$units2
# VALUE
impact_value <-
(
production_impacts %>% filter(id_impact == impact_id,
id_product == input_product_id)
)$value
#=============================================
# 1. Cas ou l'impact est en unité par kilo
if (impact_units2 == "kg")
{
impact_value_final <- impact_value * production * 1000 #multiply by 1000 because production is in t
}
#=============================================
# 2. Cas ou l'impact est en unité par hectare
else if (impact_units2 == "ha")
{
impact_value_final <- impact_value * specific_surface
}
#=============================================
# 3. Cas ou l'impact est en unité par kilo par jour
else if (impact_units2 == "kg.jour")  # cas du stockage
{
impact_value_final <- 0.00122 * production * 1000                       # Valeur rentrée mannuellement. Automatiser?
}
#=============================================
# EXCEPTIONS
#=============================================
else{
if (impact_name == "DQR"){
DQR_id <- (impacts %>% filter(name == "DQR"))$id_impact
impact_value_final = (production_impacts %>% filter(id_product == input_product_id,
id_impact == DQR_id))$value
}
else{print(paste0("Error : impact not found. Impact ID is : ",impact_id))}
}
#=============================================
# Encodage et sauvegarde
#=============================================
temp <- data.frame(name = impact_name,
value = impact_value_final,
units = impact_units1,
incertitude = (impacts %>% filter(name == impact_name))$incertitude)
list_impact <- rbind(list_impact, temp)
#print(paste0("The impact on ",impact_name," is ",impact_value_final," ",impact_units1))
}
}
return(list_impact)
}
# TEST
get_impacts(17,200)
get_impacts <-
function(input_product_id,
production)
{
# TEST
#input_product_id = 15
#production = 200
id_surface = (impacts %>% filter(name == "Surface de terre"))$id_impact
# calculate the surface
specific_surface <-
production * ((
production_impacts %>% filter(id_product == input_product_id,
id_impact == id_surface)
)$value)
# dans la DB, la surface par qtt est en ha*10-3 par kilo.
# En multipliant par la demande en tonnes,
# on obtient directement la surface spécifique en ha
print(paste0("Specific surface : ",specific_surface," ha"))
list_impact = data.frame(name = c(),
value = c(),
units = c(),
incertitude = c()
)
for (impact_id in c(1:length(impacts$id_impact))) {                              # !!!! si les id changent (pas très optimal mais j'ai pas réussi à transformer une colonne de df en liste)
#===========================================
# EXCEPTION SI IMPACT + RENDEMENT OU SURFACE
#===========================================
#if(impact_id == (impacts %>% filter(name == "Surface de terre"))$id_impact){
# do nothing
#}
if(impact_id == (impacts %>% filter(name == "Rendements"))$id_impact){
# do nothing
}
#===========================================
# CALCUL DES IMPACTS
#===========================================
else{
#print(impact_id)
impact_value_final <- 0
# NAME
impact_name <- (impacts %>% filter(id_impact == impact_id))$name
# UNITS
impact_units1 <-
(impacts %>% filter(id_impact == impact_id))$units1
impact_units2 <-
(impacts %>% filter(id_impact == impact_id))$units2
# VALUE
impact_value <-
(
production_impacts %>% filter(id_impact == impact_id,
id_product == input_product_id)
)$value
#=============================================
# 1. Cas ou l'impact est en unité par kilo
if (impact_units2 == "kg")
{
impact_value_final <- impact_value * production * 1000 #multiply by 1000 because production is in t
}
#=============================================
# 2. Cas ou l'impact est en unité par hectare
else if (impact_units2 == "ha")
{
impact_value_final <- impact_value * specific_surface
}
#=============================================
# 3. Cas ou l'impact est en unité par kilo par jour
else if (impact_units2 == "kg.jour")  # cas du stockage
{
impact_value_final <- 0.00122 * production * 1000                       # Valeur rentrée mannuellement. Automatiser?
}
#=============================================
# EXCEPTIONS
#=============================================
else{
if (impact_name == "DQR"){
DQR_id <- (impacts %>% filter(name == "DQR"))$id_impact
impact_value_final = (production_impacts %>% filter(id_product == input_product_id,
id_impact == DQR_id))$value
}
else{print(paste0("Error : impact not found. Impact ID is : ",impact_id))}
}
#=============================================
# Encodage et sauvegarde
#=============================================
temp <- data.frame(name = impact_name,
value = impact_value_final,
units = impact_units1,
incertitude = (impacts %>% filter(name == impact_name))$incertitude)
list_impact <- rbind(list_impact, temp)
#print(paste0("The impact on ",impact_name," is ",impact_value_final," ",impact_units1))
}
}
return(list_impact)
}
# TEST
get_impacts(17,200)
########################################
# Load the libraries, functions & datas
########################################
rm(list=ls())                                                                   # Clean all variables
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))                     # Set working directory to the current file
pathway = "Database projet.xlsx"                                                # link the database
library(tidyverse)
library(readxl)
library(lubridate)
library(geosphere)
library(data.table)
source("Data definition.R")
source("Get_Production.R")
source("Get_Province.R")
source("Inputs.R")
source("Get_Impacts.R")
Main = function(input_demand, input_legume, input_code, input_time, input_production_mode, input_transformation){
#==========================
# 1. GET THE IDs
#==========================
# yealds :
yealds_id <- (impacts %>% filter(name == "Rendements"))$id_impact
# legumes
input_legume_id <- (legumes%>% filter(name == input_legume))$id_legume
# production modes
input_production_mode_id <- (production_modes %>% filter(name == input_production_mode))$id_mode
# transformations
input_transformation_id <- (transformation %>% filter(transformation == input_transformation))$id_transformation
# product
input_product_id <- (products %>% filter(
id_mode == input_production_mode_id,
id_transformation == input_transformation_id,
id_legume == input_legume_id))$id_product
input_time_id <- which(months == input_time)
#==========================
# 2. GET THE TIMES
#==========================
# Some manipulation needed if for ex time start in november (11) and ends in february (2) -> length = (12-11) + 2
# harvest
harvest_start <- (legumes %>% filter(id_legume == input_legume_id))$"harvest start"
harvest_stop <- (legumes %>% filter(id_legume == input_legume_id))$"harvest stop"
if (harvest_stop < harvest_start){
harvest_time <- seq(harvest_start,12,by=1)
harvest_time <- c(harvest_stop,seq(1,harvest_stop,by=1))
}else{harvest_time <- seq(harvest_start,harvest_stop,by=1)}
# conservation
conservation_start <- (legumes %>% filter(id_legume == input_legume_id))$"conservation start"
conservation_stop <- (legumes %>% filter(id_legume == input_legume_id))$"conservation stop"
if (conservation_stop < conservation_start){
conservation_time <- seq(conservation_start,12,by=1)
conservation_time <- c(conservation_time,seq(1,conservation_stop,by=1))
}else{conservation_time <- seq(conservation_start,conservation_stop,by=1)}
#==========================
# 3. PREPARATION
#==========================
# Errors
if(length(input_product_id) == 0){return("No data :(")}
test = GetProvince(input_code)
if(length(test) == 0){return("Enter a valid postal code")}
province_order <- GetProvince(input_code)[[1]] # Get the order of the provinces
Our_location = GetProvince(input_code)[[2]]    # Name of the localization (ex : "Louvain-la-Neuve")
# various
temp_province_order <- 1  # take the value of the province during the iteration
end = FALSE               # if end is true, while loop ends
total_offer <- 0          # total_offer initialization
status <- NULL            # will save the status of the production
#input_localisation <- province_order[temp_province_order,1]
#input_localisation_name = (provinces %>% filter(id_province == input_localisation))$name
# Request recap :
#print(paste0("Resquest recap ; searching for ", input_demand,
#             " t of ", input_production_mode,
#             " ", input_transformation,
#             " ", input_legume,
#             " in ", province_order[1,3],
#             " in ", input_time))
#===================
# 4. GET THE PRODUCTION
#===================
# 1. Case of transformed product : get monthly production
if (input_transformation_id == 1){
offer <- get_production_transform(input_product_id,
yealds_id,
input_demand,
province_order)
}
# 2. Case of fresh product : divide production by harvest and conservation time
else if (input_transformation_id == 2){
# 2.1 It is the season
if(input_time_id %in% harvest_time){
#print("It is still the season.")
status <- "It is still the season."
offer <- get_production_fresh(input_product_id,
yealds_id,
input_demand,
province_order,
harvest_time,
conservation_time)
# 2.2 Not hte season but stocks
}else if (input_time_id %in% conservation_time){
#print("It is not the season anymore but there is conservation stocks.")
status <- "It is not the season anymore but there is conservation stocks."
offer <- get_production_fresh(input_product_id,
yealds_id,
input_demand,
province_order,
harvest_time,
conservation_time)
# 2.3 Not the season and no stocks
}else{
#print("It is not the season anymore and there is no more conserved stocks.")}
status <- "It is not the season anymore and there is no more conserved stocks."
offer <- 0
}
}
# 3. Outputs
impact_final <- get_impacts(input_product_id,input_demand)
output <- list(offer, impact_final)
return(output)
}
test1 <- Main(input_demand, input_legume, input_code, input_time, input_production_mode, input_transformation)
test1
#test2 <- Main(input_demand = 400,
#             input_legume = "carrot",
#             input_code = 1348,
#             input_time = "may",
#             input_transformation = "fresh",
#             input_production_mode = "organic"
#test <- Main(10000000000000000000000000000000, input_legume, input_code, input_time, input_production_mode, input_transformation)
# pour acceder à l'offre : test[[1]]
# pour acceder aux impacts : test[[2]]
