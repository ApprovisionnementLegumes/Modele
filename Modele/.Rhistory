# Chunk 1: setup
# Options générales des blocs de code R
knitr::opts_chunk$set(comment="")
# Liste des packages à charger
require(readxl)
require(pander)
require(dplyr)
require(car)
require(Hmisc)
require(emmeans)
require(visreg)
require(FactoMineR)
require(factoextra)
require(sjPlot)
require(epitools)
require(corrplot)
require(NbClust)
require(pastecs)
require(kohonen)
require(data.table)
# Chunk 2
data(wines)
X <- data.frame(wines)
Group <- vintages
Group <- as.factor(Group)
# Chunk 3
pander(table(Group))
par(mfrow=c(4,4))
for (i in c(1:13)){
boxplot(X[,i] ~ Group, ylab=dimnames(X)[[2]][i])
}
par(mfrow=c(4,4))
for (i in c(1:13)){
boxplot(X[,i] ~ Group, ylab=dimnames(X)[[2]][i], width=1)
}
par(mfrow=c(4,4))
for (i in c(1:13)){
boxplot(X[,i] ~ Group, ylab=dimnames(X)[[2]][i], width=1)
}
for (i in c(1:13)){
boxplot(X[,i] ~ Group, ylab=dimnames(X)[[2]][i])
}
par(mfrow=c(2,8))
for (i in c(1:13)){
boxplot(X[,i] ~ Group, ylab=dimnames(X)[[2]][i])
}
par(mfrow=c(2,7))
for (i in c(1:13)){
boxplot(X[,i] ~ Group, ylab=dimnames(X)[[2]][i])
}
par(mfrow=c(3,6))
for (i in c(1:13)){
boxplot(X[,i] ~ Group, ylab=dimnames(X)[[2]][i])
}
install.packages("devtools")
library(devtools)
install_github("MARSHAL-ROOT/marshal")
library(lubridate)
########################################
# Variable definitions
########################################
# 1 - Model variables
# these are the variables we would like to estimate with the model
production_locations <- NULL
production_total <- NULL
environmental_impact <- NULL
production_times <- NULL
# 2 - Data tables
# These are the tables loaded from the database
annual_production <- NULL
provinces <- NULL
products <- NULL
production_modes <- NULL
impacts <- NULL
production_impacts <- NULL
# 3 - Other variables
months <- c("january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december")
########################################
# Load the database tables
########################################
#Pathway : copy & paste here the database pathway
pathway = "base de données brouillon projet 1230.xlsx"
annual_production <- read_xlsx(pathway, sheet="annual_production")
provinces <- read_xlsx(pathway, sheet="provinces")
products <- read_xlsx(pathway, sheet="products")
production_modes <- read_xlsx(pathway, sheet="production_modes")
prices <- read_xlsx(pathway, sheet="prices")
impacts <- read_xlsx(pathway, sheet="impacts")
production_impacts <- read_xlsx(pathway, sheet="production_impacts")
########################################
# Process the datatables
########################################
# Create a data table that is easier to use by merging the needed information
production_data <- merge(annual_production, products, by.x = "id_product", by.y = "id") %>%
mutate(name_product = name) %>%
select(-name)
# merge with the localities
production_data <- merge(production_data, provinces, by.x = "id_province", by.y = "id") %>%
mutate(name_province = name)%>%
select(-name)
# merge with the production modes
production_data <- merge(production_data, production_modes, by.x = "id_mode", by.y = "id") %>%
mutate(name_mode = name) %>%
select(-name)
# Get the monthly production (sous hypothese de production equivalent par mois)
production_data <- production_data %>%
mutate(monthly_quantity = quantity / (stop_harvest - start_harvest))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # Set working directory to the current file
source("Data definition.R")
library(tidyverse)
library(readxl)
library(lubridate)
library(geosphere)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # Set working directory to the current file
source("Data definition.R")
source("Get_Production.R")
input_demand <- 100000
input_product <- "carrot"
input_lat <- 50
input_lon <- 5
input_time <- "december"
input_production_mode <- "organic"
#Find nearest province
province_order <- GetProvince(input_lat,input_lon)
print(paste0("Resquest recap ; searching for ", input_demand,
" of ", input_production_mode,
" ", input_product,
" in ", province_order[1,1],
" in ", input_time))
source("Get_Production.R")
source("Get_Province.R")
#Find nearest province
province_order <- Get_Province(input_lat,input_lon)
#Find nearest province
province_order <- GetProvince(input_lat,input_lon)
print(paste0("Resquest recap ; searching for ", input_demand,
" of ", input_production_mode,
" ", input_product,
" in ", province_order[1,1],
" in ", input_time))
# 1. Initial variables definition
end = FALSE
total_offer <- 0
temp_province_order <- 1
# 2. loop
while (end == FALSE)
{
input_localisation <- province_order[temp_province_order,1]
print(paste0("Searching in ", input_localisation))
offer <- get_production(product = input_product, time = input_time, locality = input_localisation, mode = input_production_mode)
total_offer <- total_offer + offer
if(offer > input_demand)
{
print(paste0("There is enough in ", input_localisation,
". Current offer is ",total_offer,
" while the demand is ",input_demand))
end = TRUE
}
else
{
if (temp_province_order >= length(province_order[,1]))
{
print("Sorry, there is still not enough production in Belgium for your request.")
end = TRUE
}
else
{
print(paste0("There is not enough in ", input_localisation,
", let's search in neighboring provinces."))
}
temp_province_order <- temp_province_order + 1
}
}
input_demand <- 250
input_product <- "carrot"
input_lat <- 50
input_lon <- 5
input_time <- "december"
input_production_mode <- "organic"
#frais ou transfo
########################################
# RUN THEN MODEL
########################################
#Find nearest province
province_order <- GetProvince(input_lat,input_lon)
#Find production : Make a loop ; while the production is not enough, we search in other provinces
print(paste0("Resquest recap ; searching for ", input_demand,
" of ", input_production_mode,
" ", input_product,
" in ", province_order[1,1],
" in ", input_time))
# 1. Initial variables definition
end = FALSE
total_offer <- 0
temp_province_order <- 1
# 2. loop
while (end == FALSE)
{
input_localisation <- province_order[temp_province_order,1]
print(paste0("Searching in ", input_localisation))
offer <- get_production(product = input_product, time = input_time, locality = input_localisation, mode = input_production_mode)
total_offer <- total_offer + offer
if(offer > input_demand)
{
print(paste0("There is enough in ", input_localisation,
". Current offer is ",total_offer,
" while the demand is ",input_demand))
end = TRUE
}
else
{
if (temp_province_order >= length(province_order[,1]))
{
print("Sorry, there is still not enough production in Belgium for your request.")
end = TRUE
}
else
{
print(paste0("There is not enough in ", input_localisation,
", let's search in neighboring provinces."))
}
temp_province_order <- temp_province_order + 1
}
}
View(production_data)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # Set working directory to the current file
source("Data definition.R")
source("Get_Production.R")
source("Get_Province.R")
input_demand <- 250
input_product <- "carrot"
input_lat <- 50
input_lon <- 5
input_time <- "december"
input_production_mode <- "organic"
#Find nearest province
province_order <- GetProvince(input_lat,input_lon)
print(paste0("Resquest recap ; searching for ", input_demand,
" of ", input_production_mode,
" ", input_product,
" in ", province_order[1,1],
" in ", input_time))
# 1. Initial variables definition
end = FALSE
total_offer <- 0
temp_province_order <- 1
# 2. loop
while (end == FALSE)
{
input_localisation <- province_order[temp_province_order,1]
print(paste0("Searching in ", input_localisation))
offer <- get_production(product = input_product, time = input_time, locality = input_localisation, mode = input_production_mode)
total_offer <- total_offer + offer
if(offer > input_demand)
{
print(paste0("There is enough in ", input_localisation,
". Current offer is ",total_offer,
" while the demand is ",input_demand))
end = TRUE
}
else
{
if (temp_province_order >= length(province_order[,1]))
{
print("Sorry, there is still not enough production in Belgium for your request.")
end = TRUE
}
else
{
print(paste0("There is not enough in ", input_localisation,
", let's search in neighboring provinces."))
}
temp_province_order <- temp_province_order + 1
}
}
########################################
# Load the libraries, functions & datas
########################################
library(tidyverse)
library(readxl)
library(lubridate)
library(geosphere)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # Set working directory to the current file
source("Data definition.R")
source("Get_Production.R")
source("Get_Province.R")
########################################
# Inputs
########################################
input_demand <- 250
input_product <- "carrot"
input_lat <- 50
input_lon <- 5
input_time <- "december"
input_production_mode <- "organic"
#frais ou transfo
########################################
# RUN THEN MODEL
########################################
#Find nearest province
province_order <- GetProvince(input_lat,input_lon)
#Find production : Make a loop ; while the production is not enough, we search in other provinces
print(paste0("Resquest recap ; searching for ", input_demand,
" of ", input_production_mode,
" ", input_product,
" in ", province_order[1,1],
" in ", input_time))
# 1. Initial variables definition
end = FALSE
total_offer <- 0
temp_province_order <- 1
# 2. loop
while (end == FALSE)
{
input_localisation <- province_order[temp_province_order,1]
print(paste0("Searching in ", input_localisation))
offer <- get_production(product = input_product, time = input_time, locality = input_localisation, mode = input_production_mode)
total_offer <- total_offer + offer
if(offer > input_demand)
{
print(paste0("There is enough in ", input_localisation,
". Current offer is ",total_offer,
" while the demand is ",input_demand))
end = TRUE
}
else
{
if (temp_province_order >= length(province_order[,1]))
{
print("Sorry, there is still not enough production in Belgium for your request.")
end = TRUE
}
else
{
print(paste0("There is not enough in ", input_localisation,
", let's search in neighboring provinces."))
}
temp_province_order <- temp_province_order + 1
}
}
#TEST
