library(lubridate)
library(geosphere)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # Set working directory to the current file
source("Data definition.R")
source("Get_Production.R")
source("Get_Province.R")
source("Get_Production_Monthly.R")
source("Inputs.R")
########################################
# Inputs transformation
########################################
# yealds :
yealds_id <- (impacts %>%
filter(name == "Rendements")
)$id_impact
# legumes
input_legume_id <- (legumes%>%
filter(name == input_legume)
)$id_legume
# production modes
input_production_mode_id <- (production_modes %>%
filter(name == input_production_mode)
)$id_mode
# transformations
input_transformation_id <- (transformation %>%
filter(transformation == input_transformation)
)$id_transformation
# product
input_product_id <- (repartition_modes %>%
filter(id_mode == input_production_mode_id,
id_transformation == input_transformation_id,
id_legume == input_legume_id)
)$id_product
########################################
# Get Production
########################################
# 1. Variables definition
#Find nearest province
province_order <- GetProvince(input_lon, input_lat)
temp_province_order <- 1
# various
end = FALSE
total_offer <- 0
# 2. Loop
while (end == FALSE)
{
input_localisation <- province_order[temp_province_order,1]
input_localisation_name = (provinces %>% filter(id_province == input_localisation))$name
print(paste0("Searching in ", input_localisation_name))
offer <- get_production(input_legume_id,
input_localisation)
print(offer)
#offer <- get_production_monthly(input_legume_id,offer)
total_offer <- total_offer + offer
if(total_offer > input_demand)
{
print(paste0("There is enough in ", input_localisation_name,
". Current offer is ",total_offer,
" while the demand is ",input_demand))
end = TRUE
}
else
{
if (temp_province_order >= length(province_order[,1]))
{
print("Sorry, there is still not enough production in Belgium for your request.")
end = TRUE
}
else
{
print(paste0("There is not enough in ", input_localisation_name,
", let's search in neighboring provinces."))
}
temp_province_order <- temp_province_order + 1
}
}
########################################
# Get Impacts
########################################
impact_id = 1
production = 100
surface = 100
impact_name <- (impacts %>% filter(id_impact == impact_id))$name
impact_units1 <- (impacts %>% filter(id_impact == impact_id))$units1
impact_units2 <- (impacts %>% filter(id_impact == impact_id))$units2
impact_value <- (production_impacts %>% filter(id_impact == impact_id,
id_product == input_product_id))$value
print(paste0("Impact on ", impact_name))
if (impact_units2 == "kg"){
impact_value_final <- impact_value*production
}
else if (impact_units2 == "ha"){
impact_value_final <- impact_value*surface
}
else if (impact_units2 == "ha"){
impact_value_final <- impact_value*surface}
if (impact_units2 == "kg"){
impact_value_final <- impact_value*production}
else {if (impact_units2 == "ha"){impact_value_final <- impact_value*surface}
else{
print("Error : units non recognized")
}}
if (impact_units2 == "kg"){
impact_value_final <- impact_value*production/1000} #divide by 1000 because production is in t
else if (impact_units2 == "ha"){
impact_value_final <- impact_value*surface
}
else {
print("error")
}
if (impact_units2 == "kg"){
impact_value_final <- impact_value*production/1000
} #divide by 1000 because production is in t
else if (impact_units2 == "ha"){
impact_value_final <- impact_value*surface
}
else (impact_units2 == "ha"){
impact_value_final <- impact_value*surface
}
else (impact_units2 == "ha"){
impact_value_final <- impact_value*surface
}
lse (impact_units2 == "ha"){
impact_value_final <- impact_value*surface
else {
impact_value_final <- impact_value*surface
else {
print("error")
}
print(paste0("The impact on ", impact_name,"is ", impact_value_final, " ", impact_units1))
}
else {
impact_value_final <- impact_value*surface
else {
print("error")
}
print(paste0("The impact on ", impact_name,"is ", impact_value_final, " ", impact_units1))
}
else
if (impact_units2 == "kg"){
impact_value_final <- impact_value*production/1000
} #divide by 1000 because production is in t
else{
impact_value_final <- impact_value*surface
}
if (impact_units2 == "kg"){
impact_value_final <- impact_value*production/1000
} #divide by 1000 because production is in t
else{
impact_value_final <- impact_value*surface
}
if (impact_units2 == "kg"){
impact_value_final <- impact_value*production/1000
} #divide by 1000 because production is in t
else{
impact_value_final <- impact_value*surface
}
if (impact_units2 == "kg"){
impact_value_final <- impact_value*production/1000
} #divide by 1000 because production is in t
else{
impact_value_final <- impact_value*surface
}
if (impact_units2 == "kg"){
impact_value_final <- impact_value*production/1000
} #divide by 1000 because production is in t
else
else{impact_value_final <- impact_value*surface
}
=
if (impact_units2 == "kg"){
impact_value_final <- impact_value*production/1000
} #divide by 1000 because production is in t
else{impact_value_final <- impact_value*surface
}
if (impact_units2 == "kg"){
impact_value_final <- impact_value*production/1000
} #divide by 1000 because production is in t
else{impact_value_final <- impact_value*surface
}
########################################
# Load the libraries, functions & datas
########################################
library(tidyverse)
library(readxl)
library(lubridate)
library(geosphere)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # Set working directory to the current file
source("Data definition.R")
source("Get_Production.R")
source("Get_Province.R")
source("Get_Production_Monthly.R")
source("Inputs.R")
########################################
# Inputs transformation
########################################
# yealds :
yealds_id <- (impacts %>%
filter(name == "Rendements")
)$id_impact
# legumes
input_legume_id <- (legumes%>%
filter(name == input_legume)
)$id_legume
# production modes
input_production_mode_id <- (production_modes %>%
filter(name == input_production_mode)
)$id_mode
# transformations
input_transformation_id <- (transformation %>%
filter(transformation == input_transformation)
)$id_transformation
# product
input_product_id <- (repartition_modes %>%
filter(id_mode == input_production_mode_id,
id_transformation == input_transformation_id,
id_legume == input_legume_id)
)$id_product
########################################
# Get Production
########################################
# 1. Variables definition
#Find nearest province
province_order <- GetProvince(input_lon, input_lat)
temp_province_order <- 1
# various
end = FALSE
total_offer <- 0
# 2. Loop
while (end == FALSE)
{
input_localisation <- province_order[temp_province_order,1]
input_localisation_name = (provinces %>% filter(id_province == input_localisation))$name
print(paste0("Searching in ", input_localisation_name))
offer <- get_production(input_legume_id,
input_localisation)
print(offer)
#offer <- get_production_monthly(input_legume_id,offer)
total_offer <- total_offer + offer
if(total_offer > input_demand)
{
print(paste0("There is enough in ", input_localisation_name,
". Current offer is ",total_offer,
" while the demand is ",input_demand))
end = TRUE
}
else
{
if (temp_province_order >= length(province_order[,1]))
{
print("Sorry, there is still not enough production in Belgium for your request.")
end = TRUE
}
else
{
print(paste0("There is not enough in ", input_localisation_name,
", let's search in neighboring provinces."))
}
temp_province_order <- temp_province_order + 1
}
}
########################################
# Get Impacts
########################################
impact_id = 1
production = 100
surface = 100
impact_name <- (impacts %>% filter(id_impact == impact_id))$name
impact_units1 <- (impacts %>% filter(id_impact == impact_id))$units1
impact_units2 <- (impacts %>% filter(id_impact == impact_id))$units2
impact_value <- (production_impacts %>% filter(id_impact == impact_id,
id_product == input_product_id))$value
print(paste0("Impact on ", impact_name))
if (impact_units2 == "kg"){
impact_value_final <- impact_value*production/1000 #divide by 1000 because production is in t
}
else{
impact_value_final <- impact_value*surface
}
if (impact_units2 == "kg"){
impact_value_final <- impact_value*production/1000 #divide by 1000 because production is in t
}
else{
impact_value_final <- impact_value*surface
}
if (impact_units2 == "kg"){
impact_value_final <- impact_value*production/1000 #divide by 1000 because production is in t
}
else{
impact_value_final <- impact_value*surface
}
if (impact_units2 == "kg"){
impact_value_final <- impact_value*production/1000 #divide by 1000 because production is in t
}
else{
impact_value_final <- impact_value*surface
}
if (impact_units2 == "kg")
{
impact_value_final <- impact_value*production/1000 #divide by 1000 because production is in t
}
else
{
impact_value_final <- impact_value*surface
}
if (impact_units2 == "kg")
{
impact_value_final <- impact_value*production/1000 #divide by 1000 because production is in t
}
else
{
#impact_value_final <- impact_value*surface
print("test")
}
if (impact_units2 == "kg")
{
impact_value_final <- impact_value*production/1000 #divide by 1000 because production is in t
}
else
{
#impact_value_final <- impact_value*surface
print("test")
}
R = 5
if(R == 5){print(TRUE)}
else{print(FALSE)}
R = 5
if(R == 5){print(TRUE)}
else{print(FALSE)}
R = 5
if(R == 6){print(TRUE)}
else{print(FALSE)}
R = 5
if(R == 6){print(TRUE)}
else{print(FALSE)}
else
# 2. Loop
while (end == FALSE)
{
input_localisation <- province_order[temp_province_order,1]
input_localisation_name = (provinces %>% filter(id_province == input_localisation))$name
print(paste0("Searching in ", input_localisation_name))
offer <- get_production(input_legume_id,
input_localisation)
print(offer)
#offer <- get_production_monthly(input_legume_id,offer)
total_offer <- total_offer + offer
if(total_offer > input_demand)
{
print(paste0("There is enough in ", input_localisation_name,
". Current offer is ",total_offer,
" while the demand is ",input_demand))
end = TRUE
}
else
{
if (temp_province_order >= length(province_order[,1]))
{
print("Sorry, there is still not enough production in Belgium for your request.")
end = TRUE
}
else
{
print(paste0("There is not enough in ", input_localisation_name,
", let's search in neighboring provinces."))
}
temp_province_order <- temp_province_order + 1
}
}
for (i in c(1 2 3)){
if (i == 2){
print("Find")
}
else{
print("Not Found")
}
}
for (i in c(1 2 3)){
if (i == 2){
print("Find")
}
else{
print("Not Found")
}
}
########################################
# Get Impacts
########################################
for (i in c(1 2 3)){
if (i == 2){
print("T")
}
else{
print("F")
}
}
########################################
# Get Impacts
########################################
i = 0
while (i < 5){
if (i == 2){
print("T")
}
else{
print("F")
}
i = i+1
}
for (impact_id in impacts[,1]){
impact_id = 1
production = 100
surface = 100
impact_name <- (impacts %>% filter(id_impact == impact_id))$name
impact_units1 <- (impacts %>% filter(id_impact == impact_id))$units1
impact_units2 <- (impacts %>% filter(id_impact == impact_id))$units2
impact_value <- (production_impacts %>% filter(id_impact == impact_id,
id_product == input_product_id))$value
print(paste0("Impact on ", impact_name))
if (impact_units2 == "kg")
{
impact_value_final <- impact_value*production/1000 #divide by 1000 because production is in t
}
else
{
#impact_value_final <- impact_value*surface
print("test")
}
}
print(paste0("The impact on ", impact_name,"is ", impact_value_final, " ", impact_units1))
list_impact = []
list_impact = c()
list_impact = data.frame(x = 1, y = 1:10)
View(list_impact)
list_impact = data.frame(x, y)
list_impact = data.frame(x = c(), y = c())
View(list_impact)
View(list_impact)
temp <- data.frame(name = impact_name, value = impact_value_final, units = impact_units2)
View(surfaces)
View(temp)
list_impact = data.frame(name = c(), value = c(), units = c())
temp <- data.frame(name = impact_name, value = impact_value_final, units = impact_units2)
list_impact <- merge(list_impact, by.x = name)
list_impact <- merge(list_impact, by.x = name, by.y = name)
list_impact <- merge(list_impact, by.x = name, by.y = impact_name)
temp <- data.frame(name = impact_name, value = impact_value_final, units = impact_units2)
list_impact <- merge(list_impact, by.x = name, by.y = impact_name)
temp <- data.frame(name = impact_name, value = impact_value_final, units = impact_units2)
list_impact <- rbind(list_impact, temp)
View(list_impact)
print(get_impacts(3, 100, 120))
get_impacts <- function(id_product,production,surface){
list_impact = data.frame(name = c(), value = c(), units = c())
for (impact_id in impacts[,1]){
impact_name <- (impacts %>% filter(id_impact == impact_id))$name
impact_units1 <- (impacts %>% filter(id_impact == impact_id))$units1
impact_units2 <- (impacts %>% filter(id_impact == impact_id))$units2
impact_value <- (production_impacts %>% filter(id_impact == impact_id,
id_product == input_product_id))$value
print(paste0("Impact on ", impact_name))
if (impact_units2 == "kg")
{
impact_value_final <- impact_value*production/1000 #divide by 1000 because production is in t
}
else if (impact_units2 == "ha")
{
impact_value_final <- impact_value*surface
}
else{
print("Error, units not found")
}
temp <- data.frame(name = impact_name, value = impact_value_final, units = impact_units2)
list_impact <- rbind(list_impact, temp)
print(paste0("The impact on ", impact_name," is ", impact_value_final, " ", impact_units1))
}
return(list_impact)
}
impact_id = 1
production = 100
surface = 100
print(get_impacts(3, 100, 120))
get_impacts <- function(id_product,production,surface){
list_impact = data.frame(name = c(), value = c(), units = c())
for (impact_id in impacts[,1]){
impact_name <- (impacts %>% filter(id_impact == impact_id))$name
impact_units1 <- (impacts %>% filter(id_impact == impact_id))$units1
impact_units2 <- (impacts %>% filter(id_impact == impact_id))$units2
impact_value <- (production_impacts %>% filter(id_impact == impact_id,
id_product == input_product_id))$value
print(paste0("Impact on ", impact_name))
if (impact_units2 == "kg")
{
impact_value_final <- impact_value*production/1000 #divide by 1000 because production is in t
}
else if (impact_units2 == "ha")
{
impact_value_final <- impact_value*surface
}
else{
print("Error, units not found")
}
temp <- data.frame(name = impact_name, value = impact_value_final, units = impact_units1)
list_impact <- rbind(list_impact, temp)
print(paste0("The impact on ", impact_name," is ", impact_value_final, " ", impact_units1))
}
return(list_impact)
}
impact_id = 1
production = 100
surface = 100
print(get_impacts(3, 100, 120))
