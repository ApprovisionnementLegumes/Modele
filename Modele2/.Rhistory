# Chunk 1: setup
# Options générales des blocs de code R
knitr::opts_chunk$set(comment="")
# Liste des packages à charger
require(readxl)
require(pander)
require(dplyr)
require(car)
require(Hmisc)
require(emmeans)
require(visreg)
require(FactoMineR)
require(factoextra)
require(sjPlot)
require(epitools)
require(corrplot)
require(NbClust)
require(pastecs)
require(kohonen)
require(data.table)
# Chunk 2
data(wines)
X <- data.frame(wines)
Group <- vintages
Group <- as.factor(Group)
# Chunk 3
pander(table(Group))
par(mfrow=c(4,4))
for (i in c(1:13)){
boxplot(X[,i] ~ Group, ylab=dimnames(X)[[2]][i])
}
par(mfrow=c(4,4))
for (i in c(1:13)){
boxplot(X[,i] ~ Group, ylab=dimnames(X)[[2]][i], width=1)
}
par(mfrow=c(4,4))
for (i in c(1:13)){
boxplot(X[,i] ~ Group, ylab=dimnames(X)[[2]][i], width=1)
}
for (i in c(1:13)){
boxplot(X[,i] ~ Group, ylab=dimnames(X)[[2]][i])
}
par(mfrow=c(2,8))
for (i in c(1:13)){
boxplot(X[,i] ~ Group, ylab=dimnames(X)[[2]][i])
}
par(mfrow=c(2,7))
for (i in c(1:13)){
boxplot(X[,i] ~ Group, ylab=dimnames(X)[[2]][i])
}
par(mfrow=c(3,6))
for (i in c(1:13)){
boxplot(X[,i] ~ Group, ylab=dimnames(X)[[2]][i])
}
install.packages("devtools")
library(devtools)
install_github("MARSHAL-ROOT/marshal")
library(lubridate)
########################################
# Load the libraries, functions & datas
########################################
library(tidyverse)
library(readxl)
library(lubridate)
library(geosphere)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # Set working directory to the current file
source("Data definition.R")
source("Get_Production.R")
source("Get_Province.R")
source("Get_Production_Monthly.R")
source("Inputs.R")
########################################
# Inputs transformation
########################################
# yealds :
yealds_id <- (impacts %>%
filter(name == "Rendements")
)$id_impact
# legumes
input_legume_id <- (legumes%>%
filter(name == input_legume)
)$id_legume
# production modes
input_production_mode_id <- (production_modes %>%
filter(name == input_production_mode)
)$id_mode
# transformations
input_transformation_id <- (transformation %>%
filter(transformation == input_transformation)
)$id_transformation
# product
input_product_id <- (repartition_modes %>%
filter(id_mode == input_production_mode_id,
id_transformation == input_transformation_id,
id_legume == input_legume_id)
)$id_product
########################################
# Get Production
########################################
# 1. Variables definition
#Find nearest province
province_order <- GetProvince(input_lon, input_lat)
temp_province_order <- 1
# various
end = FALSE
total_offer <- 0
# 2. Loop
while (end == FALSE)
{
input_localisation <- province_order[temp_province_order,1]
input_localisation_name = (provinces %>% filter(id_province == input_localisation))$name
print(paste0("Searching in ", input_localisation_name))
offer <- get_production(input_legume_id,
input_localisation)
print(offer)
#offer <- get_production_monthly(input_legume_id,offer)
total_offer <- total_offer + offer
if(total_offer > input_demand)
{
print(paste0("There is enough in ", input_localisation_name,
". Current offer is ",total_offer,
" while the demand is ",input_demand))
end = TRUE
}
else
{
if (temp_province_order >= length(province_order[,1]))
{
print("Sorry, there is still not enough production in Belgium for your request.")
end = TRUE
}
else
{
print(paste0("There is not enough in ", input_localisation_name,
", let's search in neighboring provinces."))
}
temp_province_order <- temp_province_order + 1
}
}
########################################
# Get Impacts
########################################
View(impacts)
View(impact_data)
get_impacts <- function(input_product_id,production, input_province_id){
# look to the purcentage of surface attributed to the product
# ex : there is 75% of the carrot surface attributed to the reasoned conventionnal agric.
specific_purcent <- (repartition_modes %>% filter(id_product == input_product_id))$"%"
# look for the legume of the product
legume <- (repartition_modes %>% filter(id_product == input_product_id))$id_legume
# calculate the surface
specific_surface <- specific_purcent*(surfaces %>% filter(id_legume == legume,
id_province == input_province_id))$surface
list_impact = data.frame(name = c(), value = c(), units = c())
for (impact_id in impacts[,1]){
impact_name <- (impacts %>% filter(id_impact == impact_id))$name
impact_units1 <- (impacts %>% filter(id_impact == impact_id))$units1
impact_units2 <- (impacts %>% filter(id_impact == impact_id))$units2
impact_value <- (production_impacts %>% filter(id_impact == impact_id,
id_product == input_product_id))$value
print(paste0("Impact on ", impact_name))
if (impact_units2 == "kg")
{
impact_value_final <- impact_value*production/1000 #divide by 1000 because production is in t
}
else if (impact_units2 == "ha")
{
impact_value_final <- impact_value*specific_surface
}
else{
print("Error, units not found")
}
temp <- data.frame(name = impact_name, value = impact_value_final, units = impact_units1)
list_impact <- rbind(list_impact, temp)
print(paste0("The impact on ", impact_name," is ", impact_value_final, " ", impact_units1))
}
return(list_impact)
}
production = 100
print(get_impacts(3, 100))
print(get_impacts(3, 100, 1))
